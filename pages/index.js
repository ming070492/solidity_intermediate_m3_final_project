import Head from 'next/head'
import Image from 'next/image'
import { Inter } from 'next/font/google'
import styles from '@src/styles/Home.module.css'
import { useState } from 'react'
import { useEffect } from 'react'
import {ethers} from "ethers";
import contract_abi from '@src/artifacts/contracts/MingToken.sol/MingToken.json';
const inter = Inter({ subsets: ['latin'] })

const contractAddress = "0x5FbDB2315678afecb367f032d93F642f64180aa3";
const MingTokenAbi = contract_abi.abi;

export default function Home() {

  const [isConnected, setIsConnected] = useState(false);
  const [provider, setProvider] = useState();
  const [connectedWallet, setIsConnectedWallet] = useState();
  const [contract, setContract] = useState();
  const [signer, setSigner] = useState();
  const [currentBalance, setCurrentBalance] = useState();

  const connectMetamask = async() => {
    if(typeof window.ethereum !== "undefined") {
      try {
        let wallet = await ethereum.request({ method: "eth_requestAccounts" });
        setIsConnectedWallet(wallet);
        setIsConnected(true);
        const connectedProvider = new ethers.providers.Web3Provider(window.ethereum);
        const s = await connectedProvider.getSigner();
        setProvider(connectedProvider);
        setSigner(s);
      } catch (e) {
        console.log(e);
      }
    }else{
      setIsConnected(false);
    }
  }

  const callContract = async() => {
    const MingTokenContract = new ethers.Contract(contractAddress, MingTokenAbi, signer);
    setContract(MingTokenContract);
  }
  
  const mintToken = async() => {
    try {
      let amount = prompt("MINT AMOUNT:");
      let dep = await contract.mint(connectedWallet.toString(), amount);
      await dep.wait();
      alert("MINTED " + amount + " MING TOKEN SUCCESSFULLY!");
    }catch(e){
      alert("ERROR: ", e);
    }
    balanceInquiry();
  }

  const burnToken = async() => {
    try {
      let amount = prompt("MINT AMOUNT:");
      let dep = await contract.burn(connectedWallet.toString(), amount);
      await dep.wait();
      alert("BURNED " + amount + " MING TOKEN SUCCESSFULLY!");
    }catch(e){
      alert("ERROR: ", e);
    }
    balanceInquiry();
  }


  const balanceInquiry = async() => {
    setCurrentBalance(parseInt(await contract.balanceOf(connectedWallet.toString())) / 1000000000000000000);
  } 

  useEffect(() => {
    if(contract !== undefined) { 
      balanceInquiry();
    }
  }, [contract], [currentBalance]);


  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        {!isConnected && <button className='button-connect-enabled' onClick={connectMetamask}>CONNECT</button>}
        {isConnected && 
            <div className='flex-div'>
              <button className='button-connect-disabled' disabled>CONNECTED</button>
              <span className='cont'><span className='label1'>WALLET ADDRESS:</span> {connectedWallet}</span>
              {!contract && <button className='button-connect-enabled' onClick={callContract}>CONNECT SMART CONTRACT</button> }
              {contract && 
                <div id='div2' className='flex-div'>
                <button className='button-connect-disabled' disabled>CONTRACT CONNECTED</button>
                <div><button className='button-connect-enabled' onClick={mintToken}>MINT</button>&nbsp;&nbsp;<button className='button-connect-enabled' onClick={burnToken}>BURN</button></div>
                <span className='cont'><span className='label1'>BALANCE:</span> {currentBalance} MING TOKEN</span>
                </div> }
            </div>
        }
      </main>
    </>
  )
}
